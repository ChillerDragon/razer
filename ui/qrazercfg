#!/usr/bin/env python
#
#   Razer device QT configuration tool
#
#   Copyright (C) 2007-2009 Michael Buesch <mb@bu3sch.de>
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from pyrazer import *


class LedCheckBox(QCheckBox):
	def __init__(self, ledsWidget, ledname, ledstate):
		text = ledname
		text += ledsWidget.tr(" LED enabled")
		QCheckBox.__init__(self, text, ledsWidget)
		self.ledsWidget = ledsWidget

		self.led = ledname
		if ledstate:
			self.setCheckState(Qt.Checked)
		else:
			self.setCheckState(Qt.Unchecked)
		self.connect(self, SIGNAL("stateChanged(int)"), self.toggled)

	def toggled(self, state):
		razer.setLed(self.ledsWidget.mouseWidget.mouse, self.led, bool(state))

class LedsWidget(QGroupBox):
	def __init__(self, mouseWidget):
		QGroupBox.__init__(self, "LEDs", mouseWidget)
		self.mouseWidget = mouseWidget

		self.setLayout(QVBoxLayout(self))
		self.leds = []

	def clear(self):
		for led in self.leds:
			led.deleteLater()
		self.leds = []

	def add(self, name, state):
		led = LedCheckBox(self, name, state)
		self.layout().addWidget(led)
		self.leds.append(led)

class MouseProfileWidget(QWidget):
	def __init__(self, mouseWidget, profileId):
		QWidget.__init__(self, mouseWidget)
		self.mouseWidget = mouseWidget
		self.profileId = profileId

		self.setLayout(QGridLayout(self))

		self.profileActive = QRadioButton(self.tr("Profile active"), self)
		self.layout().addWidget(self.profileActive, 0, 0)

		self.layout().addWidget(QLabel(self.tr("Mouse scan frequency:"), self), 1, 0)
		supportedFreqs = razer.getSupportedFreqs(self.mouseWidget.mouse)
		curFreq = razer.getCurrentFreq(self.mouseWidget.mouse, profileId)
		self.freqSel = QComboBox(self)
		self.freqSel.addItem(self.tr("Unknown Hz"), QVariant(0))
		for freq in supportedFreqs:
			self.freqSel.addItem(self.tr("%u Hz" % freq), QVariant(freq))
		index = self.freqSel.findData(QVariant(curFreq))
		if index >= 0:
			self.freqSel.setCurrentIndex(index)
		self.connect(self.freqSel, SIGNAL("currentIndexChanged(int)"), self.freqChanged)
		self.layout().addWidget(self.freqSel, 1, 1)

		self.layout().addWidget(QLabel(self.tr("Mouse scan resolution:"), self), 2, 0)
		supportedMappings = razer.getSupportedDpiMappings(self.mouseWidget.mouse)
		curMapping = razer.getDpiMapping(self.mouseWidget.mouse, profileId)
		self.resSel = QComboBox(self)
		self.resSel.addItem(self.tr("Unknown mapping"), QVariant(0xFFFFFFFF))
		for mapping in supportedMappings:
			id = mapping[0]
			res = mapping[1]
			if res:
				res = str(res)
			else:
				res = self.tr("Unknown")
			self.resSel.addItem(self.tr("Scan resolution %u   (%s DPI)" % (id+1, res)),
					    QVariant(id))
		index = self.resSel.findData(QVariant(curMapping))
		if index >= 0:
			self.resSel.setCurrentIndex(index)
		self.connect(self.resSel, SIGNAL("currentIndexChanged(int)"), self.resChanged)
		self.layout().addWidget(self.resSel, 2, 1)

	def freqChanged(self, index):
		if index == -1:
			return
		if index == 0: # "Unknown"
			return
		freq = self.freqSel.itemData(index).toUInt()[0]
		razer.setFrequency(self.mouse, freq)

	def resChanged(self, index):
		if index == -1:
			return
		if index == 0: # "Unknown"
			return
		res = self.resSel.itemData(index).toUInt()[0]
		razer.setResolution(self.mouse, res)

class OneDpiMapping(QWidget):
	def __init__(self, dpiMappingsWidget, id, resolution, isMutable):
		QWidget.__init__(self, dpiMappingsWidget)
		self.dpiMappingsWidget = dpiMappingsWidget

		self.setLayout(QHBoxLayout(self))
		self.layout().addWidget(QLabel(self.tr("Scan resolution %u" % (id+1)), self))
		supportedRes = razer.getSupportedRes(self.dpiMappingsWidget.mouseWidget.mouse)
		self.mappingSel = QComboBox(self)
		self.mappingSel.addItem(self.tr("Unknown DPI"), QVariant(0))
		for res in supportedRes:
			self.mappingSel.addItem(self.tr("%u DPI" % res), QVariant(res))
		index = self.mappingSel.findData(QVariant(resolution))
		if index >= 0:
			self.mappingSel.setCurrentIndex(index)
		self.mappingSel.setEnabled(isMutable)
		self.layout().addWidget(self.mappingSel)

class MouseDpiMappingsWidget(QGroupBox):
	def __init__(self, mouseWidget):
		QGroupBox.__init__(self, mouseWidget.tr("Possible scan resolutions"), mouseWidget)
		self.mouseWidget = mouseWidget

		self.setLayout(QVBoxLayout(self))
		self.mappings = []

	def clear(self):
		for mapping in self.mappings:
			mapping.deleteLater()
		self.mappings = []

	def add(self, id, resolution, isMutable):
		mapping = OneDpiMapping(self, id, resolution, isMutable)
		self.mappings.append(mapping)
		self.layout().addWidget(mapping)

class MouseWidget(QWidget):
	def __init__(self, parent=None):
		QWidget.__init__(self, parent)

		self.mainwnd = parent

		self.setLayout(QVBoxLayout(self))

		self.mousesel = QComboBox(self)
		self.connect(self.mousesel, SIGNAL("currentIndexChanged(int)"), self.mouseChanged)
		self.layout().addWidget(self.mousesel)
		self.layout().addSpacing(15)

		self.profiletab = QTabWidget(self)
		self.layout().addWidget(self.profiletab)

		self.dpimappings = MouseDpiMappingsWidget(self)
		self.layout().addWidget(self.dpimappings)

		self.leds = LedsWidget(self)
		self.layout().addWidget(self.leds)

		self.layout().addStretch()
		self.fwVer = QLabel(self)
		self.layout().addWidget(self.fwVer)

	def update(self, mice):
		self.mice = mice
		self.mousesel.clear()
		for mouse in mice:
			id = RazerDevId(mouse)
			self.mousesel.addItem("%s   %s-%s %s" % \
				(id.getDevName(), id.getBusType(),
				 id.getBusPosition(), id.getDevId()))

	def mouseChanged(self, index):
		self.profiletab.clear()
		self.dpimappings.clear()
		self.leds.clear()
		self.profiletab.setEnabled(index > -1)
		self.dpimappings.setEnabled(index > -1)
		self.leds.setEnabled(index > -1)
		if index == -1:
			self.fwVer.clear()
			return
		self.mouse = self.mice[index]

		profileIds = razer.getProfiles(self.mouse)
		activeProfileId = razer.getActiveProfile(self.mouse)
		activeWidget = None
		for profileId in profileIds:
			name = "Profile " + str(profileId + 1)
			widget = MouseProfileWidget(self, profileId)
			if profileId == activeProfileId:
				name = ">" + name + "<"
				activeWidget = widget
			self.profiletab.addTab(widget, name)
		if activeWidget:
			self.profiletab.setCurrentWidget(activeWidget)

		dpimappings = razer.getSupportedDpiMappings(self.mouse)
		for dpimapping in dpimappings:
			id = dpimapping[0]
			resolution = dpimapping[1]
			isMutable = dpimapping[2]
			self.dpimappings.add(id, resolution, isMutable)

		leds = razer.getLeds(self.mouse)
		for led in leds:
			name = led[0]
			state = led[1]
			self.leds.add(name, state)

		ver = razer.getFwVer(self.mouse)
		self.fwVer.setText(self.tr("Firmware version: %u.%u" % (ver[0], ver[1])))

class StatusBar(QStatusBar):
	def showMessage(self, msg):
		QStatusBar.showMessage(self, msg, 10000)

class MainWindow(QMainWindow):
	def __init__(self, parent=None):
		QMainWindow.__init__(self, parent)
		self.setWindowTitle(self.tr("Razer device configuration"))

		mb = QMenuBar(self)
		rzrmen = QMenu(self.tr("Razer"), mb)
		rzrmen.addAction(self.tr("Rescan devices"), self.scan)
		rzrmen.addSeparator()
		rzrmen.addAction(self.tr("Exit"), self.close)
		mb.addMenu(rzrmen)
		helpmen = QMenu(self.tr("Help"), mb)
		helpmen.addAction(self.tr("About"), self.about)
		mb.addMenu(helpmen)
		self.setMenuBar(mb)

		tab = QTabWidget(self)
		self.mousewidget = MouseWidget(self)
		tab.addTab(self.mousewidget, self.tr("Mice"))
		self.setCentralWidget(tab)

		self.setStatusBar(StatusBar())

		self.mice = []
		self.scan()
		self.pokeNotificationTimer()

		self.resize(450, 350)

	def pokeNotificationTimer(self):
		QTimer.singleShot(300, self.pollNotifications)

	def pollNotifications(self):
		n = razer.pollNotifications()
		if n:
			self.scan()
		self.pokeNotificationTimer()

	# Rescan for new devices
	def scan(self):
		razer.rescanMice()
		mice = razer.getMice()
		if len(mice) != len(self.mice):
			if (len(mice) == 1):
				self.statusBar().showMessage(self.tr("Found one Razer mouse"))
			elif (len(mice) > 1):
				self.statusBar().showMessage(self.tr("Found %d Razer mice" % len(mice)))
		self.mice = mice
		self.mousewidget.update(mice)

	def about(self):
		QMessageBox.information(self, self.tr("About"),
					self.tr("Razer device configuration tool\n"
						"Version %s\n"
						"Copyright (c) 2007-2009 Michael Buesch"
						% RAZER_VERSION))

def exit(exitcode):
	sys.exit(exitcode)

def main():
	try:
		global razer
		razer = Razer(enableNotifications=True)
	except RazerEx, e:
		print e
		print "Is razerd running?"
		sys.exit(1)

	app = QApplication(sys.argv)
	mainwnd = MainWindow()
	mainwnd.show()

	return app.exec_()

if __name__ == "__main__":
	exit(main())
