#!/usr/bin/env python
#
#   Razer device QT configuration tool
#
#   Copyright (C) 2007 Michael Buesch <mb@bu3sch.de>
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

QRAZERCFG_VERSION	= "001"

import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from pyrazer import *


class LedCheckBox(QCheckBox):
	def __init__(self, mouse, led, parent):
		text = led
		text += parent.tr(" LED")
		QCheckBox.__init__(self, text, parent)

		self.mousewidget = parent
		self.mouse = mouse
		self.led = led
		self.connect(self, SIGNAL("stateChanged(int)"), self.toggled)

	def toggled(self, state):
		if state:
			razer.setLed(self.mouse, self.led, 1)
		else:
			razer.setLed(self.mouse, self.led, 0)

class MouseWidget(QWidget):
	def __init__(self, parent=None):
		QWidget.__init__(self, parent)

		self.mainwnd = parent
		layout = QVBoxLayout(self)
		self.mousesel = QComboBox(self)
		self.connect(self.mousesel, SIGNAL("currentIndexChanged(int)"), self.mouseChanged)
		layout.addWidget(self.mousesel)
		layout.addSpacing(15)
		layout.addStretch()
		layout.addWidget(QLabel(self.tr("Mouse scan frequency:"), self))
		self.hzsel = QComboBox(self)
		self.connect(self.hzsel, SIGNAL("currentIndexChanged(int)"), self.freqChanged)
		layout.addWidget(self.hzsel)
		layout.addWidget(QLabel(self.tr("Mouse scan resolution:"), self))
		self.ressel = QComboBox(self)
		self.connect(self.ressel, SIGNAL("currentIndexChanged(int)"), self.resChanged)
		layout.addWidget(self.ressel)
		self.ledsLayout = QVBoxLayout()
		layout.addLayout(self.ledsLayout)
		self.ledCheckboxes = []
		layout.addStretch()
		self.fwVer = QLabel(self)
		layout.addWidget(self.fwVer)

	def update(self, mice):
		self.mice = mice
		self.mousesel.clear()
		for mouse in mice:
			self.mousesel.addItem(mouse)

	def freqChanged(self, index):
		if index == -1:
			return
		if index == 0: # "Unknown"
			return
		index -= 1
		freq = self.freqList[index]
		razer.setFrequency(self.mouse, freq)

	def resChanged(self, index):
		if index == -1:
			return
		if index == 0: # "Unknown"
			return
		index -= 1
		res = self.resList[index]
		razer.setResolution(self.mouse, res)

	def mouseChanged(self, index):
		self.hzsel.clear()
		self.ressel.clear()
		if index == -1:
			self.hzsel.setEnabled(0)
			self.ressel.setEnabled(0)
			self.fwVer.clear()
			return
		self.hzsel.setEnabled(1)
		self.ressel.setEnabled(1)
		self.mouse = self.mice[index]
		self.hzsel.addItem(self.tr("Unknown"))
		self.freqList = razer.getSupportedFreqs(self.mouse)
		for freq in self.freqList:
			self.hzsel.addItem(self.tr("%d Hz" % freq))
		self.ressel.addItem(self.tr("Unknown"))
		self.resList = razer.getSupportedRes(self.mouse)
		for res in self.resList:
			self.ressel.addItem(self.tr("%d DPI" % res))

		for chk in self.ledCheckboxes:
			self.ledsLayout.removeWidget(chk)
		self.ledCheckboxes = []
		for led in razer.getLeds(self.mouse):
			chk = LedCheckBox(self.mouse, led, self)
			self.ledCheckboxes.append(chk)
			self.ledsLayout.addWidget(chk)

		ver = razer.getFwVer(self.mouse)
		self.fwVer.setText(self.tr("Firmware version: %u.%u" % (ver[0], ver[1])))

class StatusBar(QStatusBar):
	def showMessage(self, msg):
		QStatusBar.showMessage(self, msg, 10000)

class MainWindow(QMainWindow):
	def __init__(self, parent=None):
		QMainWindow.__init__(self, parent)
		self.setWindowTitle(self.tr("Razer device configuration"))

		mb = QMenuBar(self)
		rzrmen = QMenu(self.tr("Razer"), mb)
		rzrmen.addAction(self.tr("Rescan devices"), self.scan)
		rzrmen.addSeparator()
		rzrmen.addAction(self.tr("Exit"), self.close)
		mb.addMenu(rzrmen)
		helpmen = QMenu(self.tr("Help"), mb)
		helpmen.addAction(self.tr("About"), self.about)
		mb.addMenu(helpmen)
		self.setMenuBar(mb)

		tab = QTabWidget(self)
		self.mousewidget = MouseWidget(self)
		tab.addTab(self.mousewidget, self.tr("Mice"))
		self.setCentralWidget(tab)

		self.setStatusBar(StatusBar())

		self.scan()

	# Rescan for new devices
	def scan(self):
		razer.rescanMice()
		self.mice = razer.getMice()
		self.mousewidget.update(self.mice)
		self.statusBar().showMessage(self.tr("Found %d Razer mice" % len(self.mice)))

	def about(self):
		QMessageBox.information(self, self.tr("About"),
					self.tr("Razer device configuration tool\n"
						"Version %s\n"
						"Copyright (c) 2007 Michael Buesch"
						% QRAZERCFG_VERSION))

def exit(exitcode):
	sys.exit(exitcode)

def main():
	try:
		global razer
		razer = Razer()
	except RazerEx, e:
		print e
		print "Is razerd running?"
		sys.exit(1)

	app = QApplication(sys.argv)
	mainwnd = MainWindow()
	mainwnd.show()

	return app.exec_()

if __name__ == "__main__":
	exit(main())
