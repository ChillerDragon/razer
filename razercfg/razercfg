#!/usr/bin/env python
#
#   Razer device commandline configuration tool
#
#   Copyright (C) 2007 Michael Buesch <mb@bu3sch.de>
#
#   This program is free software; you can redistribute it and/or
#   modify it under the terms of the GNU General Public License
#   as published by the Free Software Foundation; either version 2
#   of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.

RAZERCFG_VERSION	= "001"

import sys
import getopt
from ConfigParser import *
from pyrazer import *


mouseTypeString = { RAZER_MOUSETYPE_DEATHADDER : "DeathAdder",
		    RAZER_MOUSETYPE_KRAIT : "Krait",
		    RAZER_MOUSETYPE_LACHESIS : "Lachesis", }


def printList(title, list):
	sys.stdout.write(title + ": ")
	for i in range(0, len(list)):
		if i == 0:
			sys.stdout.write(str(list[i]))
		else:
			sys.stdout.write(", " + str(list[i]))
	print ""

class OpSetRes:
	def __init__(self, value):
		self.value = value
	def run(self, device):
		device.claim()
		device.setResolution(int(self.value))
		device.release()

class OpGetRes:
	def run(self, device):
		curRes = device.getResolution()
		if curRes == RAZER_MOUSE_RES_UNKNOWN:
			curRes = "<unknown>"
		suppRes = device.supportedResolutions()
		print "Current resolution:", curRes, "DPI"
		printList("Supported resolutions", suppRes)

class OpSetFreq:
	def __init__(self, value):
		self.value = value
	def run(self, device):
		device.claim()
		device.setFreq(int(self.value))
		device.release()

class OpGetFreq:
	def run(self, device):
		curFreq = device.getFreq()
		if curFreq == RAZER_MOUSE_FREQ_UNKNOWN:
			curFreq = "<unknown>"
		suppFreq = device.supportedFreqs()
		print "Current frequency:", curFreq, "Hz"
		printList("Supported frequencies", suppFreq)

class OpPrintLeds:
	def run(self, device):
		leds = device.getLeds()
		names = []
		for led in leds:
			names.append(led.getName())
		printList("Available LEDs", names)

class OpSetLed:
	def __init__(self, value):
		self.value = value
	def run(self, device):
		# parse the LED:X argument
		args = self.value.split(":")
		if len(args) != 2:
			print "-l|--setled argument error. Format LED:X"
			exit(1)
		ledname = args[0]
		on = 0
		if args[1] in ("1", "on", "ON", "true", "TRUE"):
			on = 1
		# Find the led and apply the setting
		for led in device.getLeds():
			if led.getName().lower() == ledname.lower():
				device.claim()
				led.toggleState(on)
				device.release()
				return
		print "LED \"%s\" not found on device \"%s\"" % (
			ledname, device.getBusId())

class OpGetFwVer:
	def run(self, device):
		device.claim()
		ver = device.getFwVersion()
		print "Firmware version: %u.%u" % (
			(ver & 0xFF00) >> 8, ver & 0x00FF)
		device.release()

def mapBusIdToDevice(busid):
	mice = scanMice()
	for mouse in mice:
		if busid == "mouse":
			# Return the first found mouse
			return mouse
		if mouse.getBusId() == busid:
			return mouse
	return None

# Operations on a device
class DevOps:
	def __init__(self, busid):
		self.busid = busid
		self.ops = []
	def add(self, op):
		self.ops.append(op)
	def runAll(self):
		try:
			device = mapBusIdToDevice(self.busid)
			if not device:
				print "Did not find device with ID \"%s\"" % self.busid
				exit(1)
			for op in self.ops:
				op.run(device)
		except RazerException, e:
			print "Razer device access exception:", e

# The configuration file parser
class Config(SafeConfigParser):
	SECT_DEATHADDER		= "DEATHADDER"
	SECT_KRAIT		= "KRAIT"

	def __init__(self, filename):
		SafeConfigParser.__init__(self)
		if filename == ".":
			filename = "/etc/razercfgrc"
		res = self.read(filename)
		if not filename in res:
			print "Could not read configuration file \"%s\"" % filename
			raise IOError

	def getMouse(self, mouseType):
		for mouse in self.mice:
			if mouse.getType() == mouseType:
				return mouse
		return None

	def getBoolean(self, section, option, raw=False, vars=None):
		v = self.get(section, option, raw, vars).lower()
		if v in ("1", "yes", "true", "on"):
			return True
		if v in ("0", "no", "false", "off"):
			return False
		print "Configuration: Option \"%s\" in section \"[%s]\" is not a boolean" % (
			option, section)
		raise IOError

	def getInt(self, section, option, raw=False, vars=None):
		v = self.get(section, option, raw, vars)
		try:
			v = int(v)
		except ValueError:
			print "Configuration: Option \"%s\" in section \"[%s]\" is not an integer" % (
				option, section)
			raise IOError
		return v

	def applyDeathadder(self):
		m = self.getMouse(RAZER_MOUSETYPE_DEATHADDER)
		if not m:
			return
		try:
			m.claim()
			for led in m.getLeds():
				name = "led_" + led.getName().lower()
				try:
					v = self.getBoolean(Config.SECT_DEATHADDER, name)
					led.toggleState(v)
				except NoOptionError: pass
			try:
				v = self.getInt(Config.SECT_DEATHADDER, "resolution")
				m.setResolution(v)
			except NoOptionError: pass
			try:
				v = self.getInt(Config.SECT_DEATHADDER, "frequency")
				m.setFreq(v)
			except NoOptionError: pass
			m.release()
		except RazerException, e:
			print "Razer DeathAdder access exception:", e
			m.release()
			raise IOError

	def applyKrait(self):
		m = self.getMouse(RAZER_MOUSETYPE_KRAIT)
		if not m:
			return
		try:
			m.claim()
			try:
				v = self.getInt(Config.SECT_KRAIT, "resolution")
				m.setResolution(v)
			except NoOptionError: pass
			m.release()
		except RazerException, e:
			print "Razer Krait access exception:", e
			m.release()
			raise IOError

	def apply(self):
		try:
			self.mice = scanMice()
		except RazerException, e:
			print "Failed to scan for devices:", e
		if self.has_section(Config.SECT_DEATHADDER):
			self.applyDeathadder()
		if self.has_section(Config.SECT_KRAIT):
			self.applyKrait()

def exit(exitcode):
	razerExit()
	sys.exit(exitcode)

def scanDevices():
	try:
		mice = scanMice()
		for mouse in mice:
			print "Found mouse type \"%s\" on bus \"%s\"" % (
				mouseTypeString[mouse.getType()],
				mouse.getBusId())
	except RazerException, e:
		print "Failed to scan for devices:", e
		exit(1)

def prVersion():
	print "Razer device configuration tool"
	print "Version", RAZERCFG_VERSION

def usage():
	prVersion()
	print ""
	print "Usage: razercfg [OPTIONS] [-d DEV DEVOPS] [-d DEV DEVOPS]..."
	print ""
	print "-h|--help            Print this help text"
	print "-v|--version         Print the program version number"
	print "-s|--scan            Scan for devices and print the bus IDs"
	print ""
	print "-d|--device DEV      Selects the device with the bus ID \"DEV\""
	print "    Use the special value \"mouse\" for DEV to select"
	print "    the first found razer mouse device in the system."
	print "-c|--config FILE     Read the config file and apply it."
	print "    Use the special value \".\" for FILE to select the default file"
	print ""
	print "Device operations (DEVOPS):"
	print "These options apply to the device that is specified with -d"
	print ""
	print "Options for mice:"
	print "-V|--fwver           Print the firmware version number"
	print "-r|--res DPI         Changes the scan resolution to DPI"
	print "-R|--getres          Prints the current and supported resolutions"
	print "-f|--freq FREQ       Changes the scan frequency to FREQ"
	print "-F|--getfreq         Prints the current and supported frequencies"
	print "-L|--leds            Print the identifiers of the LEDs on the device"
	print "-l|--setled LED:off  Toggle the LED with the identifier \"LED\" ON or OFF"

def parse_args():
	devOpsList = []
	currentDevOps = None

	try:
		(opts, args) = getopt.getopt(sys.argv[1:],
			"hvsd:r:Rf:FLl:Vc:",
			[ "help", "version", "scan", "device=", "res=",
			  "getres", "freq=", "getfreq", "leds", "setled=",
			  "fwver", "config=" ])
	except getopt.GetoptError:
		usage()
		exit(1)

	for (o, v) in opts:
		if o in ("-h", "--help"):
			usage()
			exit(0)
		if o in ("-v", "--version"):
			prVersion()
			exit(0)
		if o in ("-s", "--scan"):
			scanDevices()
			exit(0)
		if o in ("-d", "--device"):
			if currentDevOps and currentDevOps.ops:
				devOpsList.append(currentDevOps)
			currentDevOps = DevOps(v)
			continue
		if o in ("-c", "--config"):
			try:
				c = Config(v)
				c.apply()
			except IOError:
				exit(1)
			exit(0)
		if o in ("-r", "--res"):
			if not currentDevOps:
				print "Must specify a device (-d) before -r|--res"
				exit(1)
			currentDevOps.add(OpSetRes(v))
			continue
		if o in ("-R", "--getres"):
			if not currentDevOps:
				print "Must specify a device (-d) before -R|--getres"
				exit(1)
			currentDevOps.add(OpGetRes())
			continue
		if o in ("-f", "--freq"):
			if not currentDevOps:
				print "Must specify a device (-d) before -f|--freq"
				exit(1)
			currentDevOps.add(OpSetFreq(v))
			continue
		if o in ("-F", "--getfreq"):
			if not currentDevOps:
				print "Must specify a device (-d) before -F|--getfreq"
				exit(1)
			currentDevOps.add(OpGetFreq())
			continue
		if o in ("-L", "--leds"):
			if not currentDevOps:
				print "Must specify a device (-d) before -L|--leds"
				exit(1)
			currentDevOps.add(OpPrintLeds())
			continue
		if o in ("-l", "--setled"):
			if not currentDevOps:
				print "Must specify a device (-d) before -l|--setled"
				exit(1)
			currentDevOps.add(OpSetLed(v))
			continue
		if o in ("-V", "--fwver"):
			if not currentDevOps:
				print "Must specify a device (-d) before -V|--fwver"
				exit(1)
			currentDevOps.add(OpGetFwVer())
			continue
	if currentDevOps and currentDevOps.ops:
		devOpsList.append(currentDevOps)
	return devOpsList

def main():
	try:
		razerInit()
	except RazerException, e:
		print "Failed to initialize Razer device access library:", e
		sys.exit(1)
	devOpsList = parse_args()
	if not devOpsList:
		exit(1)
	for devOps in devOpsList:
		devOps.runAll()
	exit(0)

main()
